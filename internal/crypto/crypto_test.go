package crypto

import (
	"testing"
)

func TestGenerateKeyPair(t *testing.T) {
	keyPair, err := GenerateKeyPair()
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: %v", err)
	}

	if keyPair.PublicKey == "" {
		t.Error("–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø—É—Å—Ç–æ–π")
	}

	if keyPair.PrivateKey == "" {
		t.Error("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –ø—É—Å—Ç–æ–π")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á–∏ —Ä–∞–∑–Ω—ã–µ
	if keyPair.PublicKey == keyPair.PrivateKey {
		t.Error("–ü—É–±–ª–∏—á–Ω—ã–π –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–π
	if err := keyPair.IsValid(); err != nil {
		t.Errorf("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞—Ä–∞ –∫–ª—é—á–µ–π –Ω–µ–≤–∞–ª–∏–¥–Ω–∞: %v", err)
	}
}

func TestEncryptDecryptMessage(t *testing.T) {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä—É –∫–ª—é—á–µ–π
	keyPair, err := GenerateKeyPair()
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: %v", err)
	}

	// –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	originalMessage := "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üîê"

	// –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	encrypted, err := EncryptMessage(originalMessage, keyPair.PublicKey)
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: %v", err)
	}

	if encrypted.EncryptedData == "" {
		t.Error("–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ")
	}

	if encrypted.Nonce == "" {
		t.Error("Nonce –ø—É—Å—Ç–æ–π")
	}

	// –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	decrypted, err := DecryptMessage(encrypted, keyPair.PrivateKey)
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º
	if decrypted != originalMessage {
		t.Errorf("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º. –û–∂–∏–¥–∞–ª–æ—Å—å: %s, –ü–æ–ª—É—á–µ–Ω–æ: %s", originalMessage, decrypted)
	}
}

func TestEncryptDecryptMultipleMessages(t *testing.T) {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä—É –∫–ª—é—á–µ–π
	keyPair, err := GenerateKeyPair()
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: %v", err)
	}

	messages := []string{
		"–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
		"–í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏ üòä",
		"–¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –∏ —Ü–∏—Ñ—Ä–∞–º–∏ 123",
		"",
		"–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ " + string(make([]byte, 1000)), // 1000 —Å–∏–º–≤–æ–ª–æ–≤
	}

	for i, originalMessage := range messages {
		// –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		encrypted, err := EncryptMessage(originalMessage, keyPair.PublicKey)
		if err != nil {
			t.Fatalf("–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è %d: %v", i, err)
		}

		// –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		decrypted, err := DecryptMessage(encrypted, keyPair.PrivateKey)
		if err != nil {
			t.Fatalf("–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è %d: %v", i, err)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
		if decrypted != originalMessage {
			t.Errorf("–°–æ–æ–±—â–µ–Ω–∏–µ %d –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –û–∂–∏–¥–∞–ª–æ—Å—å: %s, –ü–æ–ª—É—á–µ–Ω–æ: %s", i, originalMessage, decrypted)
		}
	}
}

func TestValidatePublicKey(t *testing.T) {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á
	keyPair, err := GenerateKeyPair()
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: %v", err)
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á
	if err := ValidatePublicKey(keyPair.PublicKey); err != nil {
		t.Errorf("–í–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É: %v", err)
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫–ª—é—á–∏
	invalidKeys := []string{
		"",
		"invalid-base64!@#",
		"short",
		"very-long-key-that-is-not-base64-encoded-properly-and-contains-invalid-characters",
	}

	for _, invalidKey := range invalidKeys {
		if err := ValidatePublicKey(invalidKey); err == nil {
			t.Errorf("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á '%s' –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É", invalidKey)
		}
	}
}

func TestValidatePrivateKey(t *testing.T) {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á
	keyPair, err := GenerateKeyPair()
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: %v", err)
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á
	if err := ValidatePrivateKey(keyPair.PrivateKey); err != nil {
		t.Errorf("–í–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É: %v", err)
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫–ª—é—á–∏
	invalidKeys := []string{
		"",
		"invalid-base64!@#",
		"short",
		"very-long-key-that-is-not-base64-encoded-properly-and-contains-invalid-characters",
	}

	for _, invalidKey := range invalidKeys {
		if err := ValidatePrivateKey(invalidKey); err == nil {
			t.Errorf("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á '%s' –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É", invalidKey)
		}
	}
}

func TestSanitizeKeyPair(t *testing.T) {
	keyPair, err := GenerateKeyPair()
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: %v", err)
	}

	sanitized := keyPair.SanitizeForClient()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
	if sanitized["public_key"] != keyPair.PublicKey {
		t.Error("–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
	if _, exists := sanitized["private_key"]; exists {
		t.Error("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—á–∏—â–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ")
	}
}

func TestEncryptWithWrongKey(t *testing.T) {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–≤–µ –ø–∞—Ä—ã –∫–ª—é—á–µ–π
	keyPair1, err := GenerateKeyPair()
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã –∫–ª—é—á–µ–π: %v", err)
	}

	keyPair2, err := GenerateKeyPair()
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä—ã –∫–ª—é—á–µ–π: %v", err)
	}

	// –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª—é—á–æ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	originalMessage := "–°–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
	encrypted, err := EncryptMessage(originalMessage, keyPair1.PublicKey)
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: %v", err)
	}

	// –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–æ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	_, err = DecryptMessage(encrypted, keyPair2.PrivateKey)
	if err == nil {
		t.Error("–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–ª–æ—Å—å —á—É–∂–∏–º –∫–ª—é—á–æ–º")
	}
}

func BenchmarkGenerateKeyPair(b *testing.B) {
	for i := 0; i < b.N; i++ {
		_, err := GenerateKeyPair()
		if err != nil {
			b.Fatalf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: %v", err)
		}
	}
}

func BenchmarkEncryptDecrypt(b *testing.B) {
	keyPair, err := GenerateKeyPair()
	if err != nil {
		b.Fatalf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: %v", err)
	}

	message := "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞"

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		encrypted, err := EncryptMessage(message, keyPair.PublicKey)
		if err != nil {
			b.Fatalf("–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: %v", err)
		}

		_, err = DecryptMessage(encrypted, keyPair.PrivateKey)
		if err != nil {
			b.Fatalf("–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: %v", err)
		}
	}
}
